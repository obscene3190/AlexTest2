#include <iostream>
#include <sstream>

using namespace std;

void write(int **matrix, unsigned int rows, unsigned int columns) {
	for (unsigned int i = 0; i < rows; i++) {
		for (unsigned int j = 0; j < columns; j++) {
			cout << matrix[i][j] << " ";
		}
		cout << endl;
	}
}

void rowcol(unsigned int &rows, unsigned int &columns) {
	char zap;
	string string;
	getline(cin, string);
	istringstream stream(string);
	if (!(stream >> rows && stream >> zap && zap == ',' && stream >> columns)) {
		cout << "An error has occurred while reading input data" << endl;
		exit(0);
	}
}

void spiral(int ** &matrix, unsigned int rows, unsigned int columns) {
	unsigned int k = 1; // k - это числа, которыми мы заполняем матрицу, при заполнении каждый раз k увеличивается на 1.
	int m = 0, n = 0;
	while (k < rows * columns + 1) {
		/* Как прoисходит заполнение матрицы по спирали?
		Выполняется 4 команды до тех пор, пока вставляемое число не будет превышать кол-во ячеек:
		сперва заполняется первая строка;
		потом последняя колонка, исключая первый элемент;
		далее нижняя строчка справо налево, исключая последний элемент;
		заием оставшиеся элементы первого столбца снизу вверх. Наглядное представление:
		1 1 1 1
		4 ... 2
		4 ... 2
		3 3 3 2
		и так внутрь и внутрь...
		*/
		// 1 действие:
		for (unsigned int j = n; j < columns - n; j++) {
			if (k > rows * columns) {
				break;
			}
			else {
				matrix[m][j] = k;
				k++;
			}
		}
		// 2 действие:
		for (unsigned int i = m + 1; i < rows - m; i++) {
			if (k > rows * columns) {
				break;
			}
			else {
				matrix[i][columns - 1 - n] = k;
				k++;
			}
		}
		// 3 действие:
		for (int j = columns - 2 - n; j > n - 1; j--) {
			if (k > rows * columns) {
				break;
			}
			else {
				matrix[rows - 1 - m][j] = k;
				k++;
			}
		}
		// 4 действие:
		for (int i = rows - 2 - m; i > m; i--) {
			if (k > rows * columns) {
				break;
			}
			else {
				matrix[i][n] = k;
				k++;
			}
		}
		n++;
		m++; // Переход к следующему внутреннему добавлению...
	}
}

int main() {
	unsigned int rows = 0, columns = 0;
	rowcol(rows, columns);
	int ** matrix;
	matrix = new int *[rows];
	for (unsigned int i = 0; i < rows; i++) {
		matrix[i] = new int[columns];
	}
	spiral(matrix, rows, columns);
	write(matrix, rows, columns);
	//Очистка памяти
	for (unsigned int i = 0; i < rows; i++) {
		delete[] matrix[i];
	}
	delete[] matrix;
}
